name: check_enforcer

on:
  workflow_run:
    workflows: ["promptflow-sdk-cli-test"]
    types:
      - completed

jobs:
  check_enforcer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: git fetch origin main
      - run: env | sort >> $GITHUB_OUTPUT
      - name: Summarize check status
        id: summarize_check_status
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
            SET-PSDEBUG -Trace 1
            $first_commit = "${{ github.sha }}"
            $github_repository = 'microsoft/promptflow'
            $merge_commit = ""
            
            function get_diffs() {
                $snippet_debug = 1

                git log -1 | ForEach-Object {
                    if ($_.Contains("Merge")) {
                        $merge_commit = $_.Split(" ")[-3]
                    }
                }

                if ($snippet_debug -eq 1) {
                    Write-Output "merge_commit $merge_commit"
                }
            
                $need_to_check = New-Object System.Collections.Generic.HashSet[string]
                git diff --name-only HEAD origin/main | ForEach-Object {
                    if ($snippet_debug -eq 1) {
                        Write-Output "git diff --name-only HEAD main $_"
                    }
                    if ($_.Contains("src/promptflow")) {
                        $need_to_check.Add("sdk_cli")
                    }
                }
            
                $failed_reason =  ""
                $failedCount = 3
            
                for ($i = 0; $i -lt $failedCount; $i++) {
                    #Start-Sleep -Seconds 20
                    
                    $pipelines = @{
                        "executor_e2e_tests" = 0;
                        "executor_unit_tests" = 0;
                        "sdk_cli_tests" = 0;
                        "sdk_cli_global_config_tests" = 0;
                        "sdk_pfs_e2e_test" = 0;
                        "sdk_cli_azure_test" = 0;
                    }
                    $pipelines_count = @{
                        "executor_e2e_tests" = 0;
                        "executor_unit_tests" = 0;
                        "sdk_cli_tests" = 0;
                        "sdk_cli_global_config_tests" = 0;
                        "sdk_pfs_e2e_test" = 0;
                        "sdk_cli_azure_test" = 0;
                    }
                    
                    foreach ($item in $need_to_check) {
                        if ($item -eq "sdk_cli") {
                            $pipelines.sdk_cli_tests = 4
                            $pipelines.sdk_cli_global_config_tests = 1
                            $pipelines.sdk_cli_azure_test = 2
                            $pipelines.sdk_pfs_e2e_test = 2
                        }
                    }
            
                    # Get pipeline status.
                    $valid_status_array = @()

                    $(gh api /repos/microsoft/promptflow/commits/$merge_commit/check-suites) `
                    | ConvertFrom-Json `
                    | Select-Object -ExpandProperty check_suites `
                    | ForEach-Object {
                        if ($snippet_debug -eq 1) {
                            Write-Output "check-suites id $($_.id)"
                        }
                        $suite_id = $_.id
                        $(gh api /repos/microsoft/promptflow/check-suites/$suite_id/check-runs) `
                        | ConvertFrom-Json `
                        | Select-Object -ExpandProperty check_runs `
                        | ForEach-Object {
                            if ($snippet_debug -eq 1) {
                                Write-Output "check runs name $($_.name)"
                            }
                            foreach ($key in $pipelines.Keys) {
                                $value = $pipelines[$key]
                                if ($value -eq 0) {
                                    continue
                                }
                                if ($_.name.Contains($key)) {
                                    $pipelines_count[$key] += 1
                                    $valid_status_array += $_
                                }
                            }
                        }
                    }
                    
            
                    # Get pipeline conclusion. count should match.
            
                    foreach ($key in $pipelines.Keys) {
                        if ($pipelines_count[$key] -lt $pipelines[$key]) {
                            $failed_reason = "Not all pipelines are triggered."
                        }
                    }
                    if ($failed_reason -ne "") {
                        Write-Output "$failed_reason"
                        if ($snippet_debug -eq 1) {
                            Write-Output "pipelines_count"
                            $pipelines_count.GetEnumerator() | ForEach-Object {
                                Write-Output "  $($_.Key): $($_.Value)"
                            }
                        }
                        continue
                    }
                    $pipelines_success_count = @{
                        "executor_e2e_tests" = 0;
                        "executor_unit_tests" = 0;
                        "sdk_cli_tests" = 0;
                        "sdk_cli_global_config_tests" = 0;
                        "sdk_pfs_e2e_test" = 0;
                        "sdk_cli_azure_test" = 0;
                    }
            
                    $valid_status_array `
                    | ForEach-Object {
                        foreach ($key in $pipelines.Keys) {
                            $value = $pipelines[$key]
                            if ($value -eq 0) {
                                continue
                            }
                            if ($_.name.Contains($key)) {
                                if ($_.conclusion -ieq "success") {
                                    $pipelines_success_count[$key] += 1
                                } elseif ($_.conclusion -ieq "failure") {
                                    $failed_reason = "Required pipelines are not successful."
                                } else {
                                    $failed_reason = "Required pipelines are not finished."
                                }
                            }
                            Write-Output "$key is $($_.conclusion)."
                        }
                    }
                    if ($snippet_debug -eq 1) {
                        Write-Output "pipelines_count"
                        $pipelines_count.GetEnumerator() | ForEach-Object {
                            Write-Output "  $($_.Key): $($_.Value)"
                        }
                    }
                    if ($failed_reason.Contains("not successful")) {
                        throw "$failed_reason"
                    } elseif ($failed_reason.Contains("not successful")) {
                        Write-Output "$failed_reason"
                        continue
                    } else {
                        Write-Output "All required pipelines are successful."
                        break
                    }
                }
                if ($failed_reason -ne "") {
                    throw "$failed_reason"
                }
            }
            
            get_diffs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
